#apiVersion: argoproj.io/v1alpha1
#kind: WorkflowTemplate
#metadata:
#  name: yacht
#spec:
#  arguments:
#    parameters:
#      - name: repo
#        value: https://github.com/KU-Yacht/spring-example
#      - name: branch
#        value: main
#      - name: path
#        value: .
#      - name: image
#        value: yacht24/spring-test:v0.0.1
#  entrypoint: main
#  volumeClaimTemplates:
#    - metadata:
#        name: work
#      spec:
#        accessModes: [ "ReadWriteOnce" ]
#        resources:
#          requests:
#            storage: 128Mi
#  templates:
#    - name: main
#      dag:
#        tasks:
#          - name: clone-application
#            template: clone-application
#            arguments:
#              parameters:
#                - name: repo
#                  value: "{{workflow.parameters.repo}}"
#                - name: branch
#                  value: "{{workflow.parameters.branch}}"
#          - name: build-and-push
#            template: build-and-push
#            arguments:
#              parameters:
#                - name: path
#                  value: "{{workflow.parameters.path}}"
#                - name: image
#                  value: "{{workflow.parameters.image}}"
#            depends: "clone-application"
#          - name: clone-cdk8s
#            template: clone-cdk8s
#          - name: make-deployment-yaml
#            template: make-deployment-yaml
#            depends: "clone-cdk8s"
#          - name: make-svc-yaml
#            template: make-svc-yaml
#            depends: "clone-cdk8s"
#          - name: deploy-deployment
#            template: deploy-deployment
#            arguments:
#              parameters:
#                - name: deployment-yaml
#                  value: "{{tasks.make-deployment-yaml.outputs.result}}"
#            depends: "build-and-push && make-deployment-yaml"
#          - name: deploy-svc
#            template: deploy-svc
#            arguments:
#              parameters:
#                - name: svc-yaml
#                  value: "{{tasks.make-svc-yaml.outputs.result}}"
#            depends: "build-and-push && make-svc-yaml"
#    - name: clone-application
#      inputs:
#        parameters:
#          - name: repo
#          - name: branch
#      container:
#        volumeMounts:
#          - mountPath: /work
#            name: work
#        image: alpine/git:v2.26.2
#        workingDir: /work
#        args:
#          - clone
#          - --depth
#          - "1"
#          - --branch
#          - "{{inputs.parameters.branch}}"
#          - --single-branch
#          - "{{inputs.parameters.repo}}"
#          - .
#    - name: build-and-push
#      inputs:
#        parameters:
#          - name: path
#          - name: image
#      volumes:
#        - name: docker-config
#          secret:
#            secretName: docker-config
#      container:
#        readinessProbe:
#          exec:
#            command: [ sh, -c, "buildctl debug workers" ]
#        image: moby/buildkit:v0.9.3-rootless
#        volumeMounts:
#          - name: work
#            mountPath: /work
#          - name: docker-config
#            mountPath: /.docker
#        workingDir: /work/{{inputs.parameters.path}}
#        env:
#          - name: BUILDKITD_FLAGS
#            value: --oci-worker-no-process-sandbox
#          - name: DOCKER_CONFIG
#            value: /.docker
#        command:
#          - buildctl-daemonless.sh
#        args:
#          - build
#          - --frontend
#          - dockerfile.v0
#          - --local
#          - context=.
#          - --local
#          - dockerfile=.
#          - --output
#          - type=image,name=docker.io/{{inputs.parameters.image}},push=true
#        securityContext:
#          privileged: true
#    - name: clone-cdk8s
#      container:
#        image: alpine/git:v2.26.2
#        args:
#          - clone
#          - --depth
#          - "1"
#          - --branch
#          - "main"
#          - --single-branch
#          - "https://github.com/KU-Yacht/Yacht"
#          - .
#    - name: make-deployment-yaml
#      script:
#        image: debian:9.4
#        command: [ bash ]
#        source: |
#          cat << EOF
#          apiVersion: apps/v1
#          kind: Deployment
#          metadata:
#            namespace: argo
#            name: spring-deployment
#          spec:
#            replicas: 1
#            selector:
#              matchLabels:
#                app: hello-k8s
#            template:
#              metadata:
#                labels:
#                  app: hello-k8s
#              spec:
#                containers:
#                  - image: yacht24/spring-test:v0.0.13
#                    name: hello-kubernetes
#                    ports:
#                      - containerPort: 8080
#          EOF
#    - name: make-svc-yaml
#      script:
#        image: debian:9.4
#        command: [ bash ]
#        source: |
#          cat << EOF
#          apiVersion: v1
#          kind: Service
#          metadata:
#            name: spring-service
#            namespace: argo
#          spec:
#            type: NodePort
#            ports:
#              - port: 8080
#                targetPort: 8080
#                nodePort: 30007
#            selector:
#              app: hello-k8s
#          EOF
#    - name: deploy-deployment
#      inputs:
#        parameters:
#          - name: deployment-yaml
#      resource:
#        action: apply
#        manifest: "{{inputs.parameters.deployment-yaml}}"
#    - name: deploy-svc
#      inputs:
#        parameters:
#          - name: svc-yaml
#      resource:
#        action: apply
#        manifest: "{{inputs.parameters.svc-yaml}}"
#
