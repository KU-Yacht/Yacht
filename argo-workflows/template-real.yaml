apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: yacht
spec:
  arguments:
    parameters:
      - name: repo
        value: https://github.com/KU-Yacht/spring-example
      - name: branch
        value: main
      - name: path
        value: .
      - name: image
        value: yacht24/spring-test:v0.0.1
  entrypoint: main
  volumeClaimTemplates:
    - metadata:
        name: work
      spec:
        accessModes: [ "ReadWriteOnce" ]
        resources:
          requests:
            storage: 128Mi
    - metadata:
        name: work2
      spec:
        accessModes: [ "ReadWriteOnce" ]
        resources:
          requests:
            storage: 64Mi
  templates:
    - name: main
      dag:
        tasks:
          - name: clone-application
            template: clone-application
            arguments:
              parameters:
                - name: repo
                  value: "{{workflow.parameters.repo}}"
                - name: branch
                  value: "{{workflow.parameters.branch}}"
          - name: build-and-push
            template: build-and-push
            arguments:
              parameters:
                - name: path
                  value: "{{workflow.parameters.path}}"
                - name: image
                  value: "{{workflow.parameters.image}}"
            depends: "clone-application"
          - name: clone-cdk8s
            template: clone-cdk8s
          - name: setup-node
            template: setup-node
            depends: "clone-cdk8s"
          - name: make-deploy-yaml
            template: make-deploy-yaml
            arguments:
              parameters:
                - name: image
                  value: "{{workflow.parameters.image}}"
            depends: "setup-node"
          - name: deployment-yaml
            template: deployment-yaml
            arguments:
              parameters:
              - name: deployment-yaml
                value: "{{tasks.make-deploy-yaml.outputs.parameters.deployment-yaml}}"
            depends: "make-deploy-yaml && build-and-push"
          - name: service-yaml
            template: service-yaml
            arguments:
              parameters:
                - name: service-yaml
                  value: "{{tasks.make-deploy-yaml.outputs.parameters.service-yaml}}"
            depends: "make-deploy-yaml && build-and-push"
          - name: make-ingress-yaml
            template: make-ingress-yaml
            depends: "deploy-svc"
          - name: deploy-ingress
            template: deploy-ingress
            arguments:
              parameters:
                - name: ingress-yaml
                  value: "{{tasks.make-ingress-yaml.outputs.result}}"
            depends: "make-ingress-yaml"
    - name: clone-application
      inputs:
        parameters:
          - name: repo
          - name: branch
      container:
        volumeMounts:
          - mountPath: /work
            name: work
        image: alpine/git:v2.26.2
        workingDir: /work
        args:
          - clone
          - --depth
          - "1"
          - --branch
          - "{{inputs.parameters.branch}}"
          - --single-branch
          - "{{inputs.parameters.repo}}"
          - .
    - name: build-and-push
      inputs:
        parameters:
          - name: path
          - name: image
      volumes:
        - name: docker-config
          secret:
            secretName: docker-config
      container:
        readinessProbe:
          exec:
            command: [ sh, -c, "buildctl debug workers" ]
        image: moby/buildkit:v0.9.3-rootless
        volumeMounts:
          - name: work
            mountPath: /work
          - name: docker-config
            mountPath: /.docker
        workingDir: /work/{{inputs.parameters.path}}
        env:
          - name: BUILDKITD_FLAGS
            value: --oci-worker-no-process-sandbox
          - name: DOCKER_CONFIG
            value: /.docker
        command:
          - buildctl-daemonless.sh
        args:
          - build
          - --frontend
          - dockerfile.v0
          - --local
          - context=.
          - --local
          - dockerfile=.
          - --output
          - type=image,name=docker.io/{{inputs.parameters.image}},push=true
        securityContext:
          privileged: true
    - name: clone-cdk8s
      inputs:
        parameters:
          - name: repo
      container:
        volumeMounts:
          - mountPath: /work2
            name: work2
        image: alpine/git:v2.26.2
        workingDir: /work2
        args:
          - clone
          - --depth
          - "1"
          - --branch
          - "main"
          - --single-branch
          - "https://github.com/KU-Yacht/Yacht"
          - .
    - name: setup-node
      container:
        volumeMounts:
          - mountPath: /work2
            name: work2
        workingDir: /work2/cdk8s/backend
        image: node:latest
        command: [ sh, -c ]
        args: [ "npm install" ]
    - name: make-deploy-yaml
      inputs:
        parameters:
          - name: image
      container:
        env:
          - name: DOCKER_IMAGE
            value: "{{inputs.parameters.image}}"
        volumeMounts:
          - mountPath: /work2
            name: work2
        workingDir: /work2/cdk8s/backend
        image: brennerm/cdk8s:latest
        args:
          - synth
      outputs:
        parameters:
        - name: deployment-yaml
          valueFrom:
            path: /work2/cdk8s/backend/dist/Deployment.spring-deployment.k8s.yaml
        - name: service-yaml
          valueFrom:
            path: /work2/cdk8s/backend/dist/Service.spring-service.k8s.yaml
    - name: deployment-yaml
      inputs:
        parameters:
        - name: deployment-yaml
      resource:
        action: apply
        manifest: "{{inputs.parameters.deployment-yaml}}"
    - name: service-yaml
      inputs:
        parameters:
          - name: service-yaml
      resource:
        action: apply
        manifest: "{{inputs.parameters.svc-yaml}}"
    - name: make-ingress-yaml
      script:
        image: debian:9.4
        command: [ bash ]
        source: |
          cat << EOF
          apiVersion: networking.k8s.io/v1
          kind: Ingress
          metadata:
            name: spring-ingress
            namespace: argo
            annotations:
              nginx.ingress.kubernetes.io/backend-protocol: HTTPS
              nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
              nginx.ingress.kubernetes.io/rewrite-target: /$2
              nginx.ingress.kubernetes.io/ssl-passthrough: "true"
          spec:
            ingressClassName: nginx
            rules:
            - http:
                paths:
                - path: /spring(/|$)(.*)
                  pathType: Prefix
                  backend:
                    service:
                      name: spring-service
                      port:
                        number: 12000
          EOF
    - name: deploy-ingress
      inputs:
        parameters:
          - name: ingress-yaml
      resource:
        action: apply
        manifest: "{{inputs.parameters.ingress-yaml}}"
